{"version":3,"sources":["components/LoadingComponent.tsx","api/apiQueries.tsx","utilities/utilities.tsx","hooks/useWordsList.tsx","components/ErrorComponent.tsx","components/form/AddForm.tsx","hooks/useAddWord.tsx","components/EditableWord.tsx","components/WordItem.tsx","components/WordsList.tsx","components/AppPage.tsx","components/learning/LearningForm.tsx","components/learning/LearningItem.tsx","components/learning/LearningList.tsx","components/learning/LearningCheckingButtons.tsx","components/learning/LearningResult.tsx","components/learning/LearningPageLoader.tsx","components/PageLoader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoadingComponent","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apiQueries","getData","Promise","resolve","reject","database","ref","on","data","words","serverData","val","Object","keys","map","key","translation","mapWordsList","error","addItem","newWord","newWordKey","child","push","updates","update","updateItem","eng","rus","deleteItem","word","console","log","remove","then","catch","message","notReachable","state","Error","useWordsList","useState","type","setState","useEffect","wordsList","reloadWordsList","ErrorComponent","onMsg","title","onClick","AddForm","addingNewWord","draft","addWord","setError","useAddWord","setDraft","handleChange","e","target","name","value","handleSubmit","trim","length","test","isDraftValid","method","onSubmit","Input","onChange","Button","variant","color","preventDefault","EditableWord","index","onWordsListMsg","draftEditableWord","setDraftEditableWord","TableRow","TableCell","component","scope","TextField","label","WordItem","WordsList","editableWord","setEditableWord","TableContainer","Table","sx","minWidth","TableHead","TableBody","msg","AppPage","studyTypes","LearningForm","allWordsArray","typeStudy","setTypeStudy","amountWords","setAmountWords","amount","Select","labelId","id","event","option","MenuItem","InputProps","inputProps","min","InputLabelProps","shrink","toString","LearningItem","result","correctButtonIsClicked","setValue","wordFromUser","show","disabled","itemResult","find","item","undefined","isCorrect","disableInput","onBlur","userInput","backgroundColor","LearningList","labelTable","learningWords","LearningCheckingButtons","anyMistakes","LearningResult","filter","LearningPageLoader","stateLearning","setStateLearning","stateLearningWords","setStateLearningWords","setResult","setCorrectButtonIsClicked","learningWordsForUser","userData","sort","Math","random","slice","uuidv4","hide","newStateLearningWords","findIndex","el","addOneUserWordToState","arr","a","checkResult","PageLoader","to","path","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6785bb98.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const LoadingComponent = () => {\r\n  return <div>Loading...</div>;\r\n};\r\n","import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/database\";\nimport { Translation, Word } from \"../types/types\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBr1PLF6Zdq_k2eLlR3HlgUApNGejrBNIA\",\n  authDomain: \"english-vocabulary-react.firebaseapp.com\",\n  databaseURL: \"https://english-vocabulary-react-default-rtdb.firebaseio.com\",\n  projectId: \"english-vocabulary-react\",\n  storageBucket: \"english-vocabulary-react.appspot.com\",\n  messagingSenderId: \"281598012164\",\n  appId: \"1:281598012164:web:7e8ed5899b5cf80bf8fe51\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst errData = (error: string) => {\n  console.log(\"Error!\", error);\n};\n\nconst listWords = () => {\n  const database = firebase.database();\n  return database.ref(\"words\");\n};\n\nconst mapWordsList = (data: firebase.database.DataSnapshot) => {\n  const serverData = data.val();\n  return Object.keys(serverData).map((key) => {\n    const translation = serverData[key] as Translation;\n    return {\n      ...translation,\n      key,\n    } as Word;\n  });\n};\n\nconst apiQueries = {\n  getData(): Promise<Word[]> {\n    return new Promise((resolve, reject) => {\n      listWords().on(\n        \"value\",\n        (data) => {\n          const words: Word[] = mapWordsList(data);\n          return resolve(words);\n        },\n        (error) => {\n          reject(error);\n        }\n      );\n    });\n  },\n\n  addItem(newWord: Translation): Promise<void> {\n    const newWordKey = firebase.database().ref().child(\"words\").push().key;\n    const updates: { [index: string]: {} } = {};\n    updates[`/words/${newWordKey}`] = newWord;\n    return firebase.database().ref().update(updates);\n  },\n\n  updateItem(newWord: Word) {\n    const adaNameRef = firebase.database().ref(`words/${newWord.key}`);\n    adaNameRef.update({ eng: newWord.eng, rus: newWord.rus });\n  },\n\n  deleteItem(word: Word) {\n    console.log(word.key);\n    const adaRef = firebase.database().ref(`words/${word.key}`);\n    adaRef\n      .remove()\n      .then(function () {\n        console.log(\"Remove succeeded.\");\n      })\n      .catch(function (error) {\n        console.log(`Remove failed: ${error.message}`);\n      });\n  },\n};\n\nexport default apiQueries;\n","export const notReachable = (state: never): never => {\r\n    throw new Error(state);\r\n};","import { useEffect, useState } from \"react\";\r\nimport apiQueries from \"../api/apiQueries\";\r\nimport { Word } from \"../types/types\";\r\nimport { notReachable } from \"../utilities/utilities\";\r\n\r\nexport type State =\r\n  | {\r\n      type: \"loading\";\r\n    }\r\n  | {\r\n      type: \"loaded\";\r\n      wordsList: Word[];\r\n    }\r\n  | {\r\n      type: \"error\";\r\n      error: string;\r\n    };\r\n\r\nexport const useWordsList = (): {\r\n  state: State;\r\n  reloadWordsList: () => void;\r\n} => {\r\n  const [state, setState] = useState<State>({\r\n    type: \"loading\",\r\n  });\r\n\r\n  const showList = () => {\r\n    apiQueries\r\n      .getData()\r\n      .then((words: Word[]) => {\r\n        setState({\r\n          type: \"loaded\",\r\n          wordsList: words,\r\n        });\r\n      })\r\n      .catch((error: Error) => {\r\n        setState({\r\n          type: \"error\",\r\n          error: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    switch (state.type) {\r\n      case \"loading\":\r\n        showList();\r\n        break;\r\n      case \"loaded\":\r\n      case \"error\":\r\n        break;\r\n      default:\r\n        notReachable(state);\r\n    }\r\n  }, [state]);\r\n\r\n  const reloadWordsList = () => {\r\n    setState({\r\n      type: \"loading\",\r\n    });\r\n  };\r\n\r\n  return { state, reloadWordsList };\r\n};\r\n","import React from \"react\";\r\n\r\ntype ErrorComponentProps = {\r\n  onMsg: (msg: Msg) => void;\r\n};\r\n\r\ntype Msg = {\r\n  type: \"reload_data_button_clicked\";\r\n};\r\n\r\nexport const ErrorComponent = ({ onMsg }: ErrorComponentProps) => {\r\n  return (\r\n    <>\r\n      <div>Server error</div>\r\n      <button\r\n        title=\"Reload data\"\r\n        type=\"button\"\r\n        onClick={() => {\r\n          onMsg({ type: \"reload_data_button_clicked\" });\r\n        }}\r\n      >\r\n        Reload data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Translation } from \"../../types/types\";\r\nimport { Input, Button } from \"@mui/material\";\r\nimport { isDraftValid, useAddWord } from \"../../hooks/useAddWord\";\r\nimport { LoadingComponent } from \"../LoadingComponent\";\r\n\r\ntype AddFormProps = {\r\n  onMsg: (msg: Msg) => void;\r\n};\r\n\r\ntype Msg = {\r\n  type: \"new_word_added\";\r\n  word: Translation;\r\n};\r\n\r\nexport const AddForm = ({ onMsg }: AddFormProps) => {\r\n  const { state, addWord, setError } = useAddWord();\r\n\r\n  const [draft, setDraft] = useState<Translation>({\r\n    eng: \"\",\r\n    rus: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    switch (state.type) {\r\n      case \"loaded\": {\r\n        onMsg({\r\n          type: \"new_word_added\",\r\n          word: state.word,\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }, [onMsg, state]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setDraft((draft) => ({\r\n      ...draft,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (isDraftValid(draft)) {\r\n      addWord(draft);\r\n    } else {\r\n      setError(\"draft is not valid\");\r\n    }\r\n  };\r\n\r\n  switch (state.type) {\r\n    case \"loading\":\r\n      return <LoadingComponent />;\r\n    case \"error\":\r\n    case \"not_asked\":\r\n    case \"loaded\":\r\n      return (\r\n        <form method=\"get\" onSubmit={handleSubmit}>\r\n          {state.type === \"error\" ? state.error : \"no errors\"}\r\n          <Input\r\n            type=\"text\"\r\n            value={draft.eng}\r\n            name=\"eng\"\r\n            onChange={handleChange}\r\n          />\r\n          <Input\r\n            type=\"text\"\r\n            value={draft.rus}\r\n            name=\"rus\"\r\n            onChange={handleChange}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"success\"\r\n            type=\"submit\"\r\n            onClick={(e) => {\r\n              handleSubmit();\r\n              e.preventDefault();\r\n            }}\r\n          >\r\n            Add word\r\n          </Button>\r\n        </form>\r\n      );\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Translation } from \"../types/types\";\r\nimport apiQueries from \"../api/apiQueries\";\r\nimport { notReachable } from \"../utilities/utilities\";\r\n\r\nexport type State =\r\n  | {\r\n      type: \"not_asked\";\r\n    }\r\n  | {\r\n      type: \"loading\";\r\n      draft: Translation;\r\n    }\r\n  | {\r\n      type: \"loaded\";\r\n      word: Translation;\r\n    }\r\n  | {\r\n      type: \"error\";\r\n      error: string;\r\n    };\r\n\r\nexport const isDraftValid = (draft: Translation): boolean => {\r\n  const eng = draft.eng.trim();\r\n  const rus = draft.rus.trim();\r\n  const cyrillicRegExpression = /^[а-яА-Я\\s]*$/;\r\n  const latinRegExpression = /^[a-zA-Z\\s]*$/;\r\n  let isValid = null;\r\n  if (eng.length + rus.length < 2) {\r\n    isValid = false;\r\n  } else\r\n    isValid = !(\r\n      !cyrillicRegExpression.test(rus) || !latinRegExpression.test(eng)\r\n    );\r\n  return isValid;\r\n};\r\n\r\ntype ReturnType = {\r\n  state: State;\r\n  addWord: (word: Translation) => void;\r\n  setError: (error: string) => void;\r\n};\r\n\r\nexport const useAddWord = (): ReturnType => {\r\n  const [state, setState] = useState<State>({\r\n    type: \"not_asked\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    switch (state.type) {\r\n      case \"not_asked\":\r\n        break;\r\n      case \"loaded\":\r\n        break;\r\n      case \"error\":\r\n        break;\r\n      case \"loading\": {\r\n        addingNewWord(state.draft);\r\n        break;\r\n      }\r\n      default: {\r\n        return notReachable(state);\r\n      }\r\n    }\r\n  }, [state]);\r\n\r\n  const addingNewWord = (word: Translation) => {\r\n    apiQueries\r\n      .addItem(word)\r\n      .then(() => {\r\n        setState({ type: \"loaded\", word: word });\r\n      })\r\n      .catch((error: Error) => {\r\n        setState({ type: \"error\", error: error.message });\r\n      });\r\n  };\r\n\r\n  const addWord = (word: Translation) => {\r\n    setState({ type: \"loading\", draft: word });\r\n  };\r\n\r\n  const setError = (error: string): void => {\r\n    setState({ type: \"error\", error: error });\r\n  };\r\n  return { state, addWord, setError };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Word } from \"../types/types\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { GiCancel } from \"react-icons/gi\";\r\nimport { MdDone } from \"react-icons/md\";\r\nimport apiQueries from \"../api/apiQueries\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ntype Msg = {\r\n  type: \"word_updated\";\r\n};\r\n\r\ntype WordsListMsg = {\r\n  type: \"cancel_change\";\r\n};\r\n\r\ntype WordItemProps = {\r\n  word: Word;\r\n  index: number;\r\n  onMsg: (msg: Msg) => void;\r\n  onWordsListMsg: (msg: WordsListMsg) => void;\r\n};\r\n\r\nexport const EditableWord = ({\r\n  word,\r\n  index,\r\n  onMsg,\r\n  onWordsListMsg,\r\n}: WordItemProps) => {\r\n  const [draftEditableWord, setDraftEditableWord] = useState<Word>(word);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setDraftEditableWord((draftEditableWord: Word) => ({\r\n      ...draftEditableWord,\r\n      [name]: value,\r\n    }));\r\n    console.log(draftEditableWord);\r\n  };\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell component=\"th\" scope=\"row\">\r\n        {index}\r\n      </TableCell>\r\n      <TableCell>\r\n        <TextField\r\n          label=\"English\"\r\n          variant=\"outlined\"\r\n          value={draftEditableWord.eng}\r\n          onChange={handleChange}\r\n          name=\"eng\"\r\n        />\r\n      </TableCell>\r\n      <TableCell>\r\n        <TextField\r\n          label=\"Russian\"\r\n          variant=\"outlined\"\r\n          value={draftEditableWord.rus}\r\n          onChange={handleChange}\r\n          name=\"rus\"\r\n        />\r\n      </TableCell>\r\n      <TableCell>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"success\"\r\n          onClick={(e) => {\r\n            apiQueries.updateItem(draftEditableWord);\r\n            onMsg({ type: \"word_updated\" });\r\n          }}\r\n        >\r\n          <MdDone />\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"error\"\r\n          onClick={(e) => {\r\n            onWordsListMsg({ type: \"cancel_change\" });\r\n          }}\r\n        >\r\n          <GiCancel />\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Word } from \"../types/types\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { MdDeleteForever } from \"react-icons/md\";\r\nimport { GrEdit } from \"react-icons/gr\";\r\nimport apiQueries from \"../api/apiQueries\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\ntype Msg = {\r\n  type: \"word_deleted\";\r\n};\r\n\r\ntype WordsListMsg = {\r\n  type: \"change_this_word\";\r\n  word: Word;\r\n};\r\n\r\ntype WordItemProps = {\r\n  word: Word;\r\n  index: number;\r\n  onMsg: (msg: Msg) => void;\r\n  onWordsListMsg: (msg: WordsListMsg) => void;\r\n};\r\n\r\nexport const WordItem = ({\r\n  word,\r\n  index,\r\n  onMsg,\r\n  onWordsListMsg,\r\n}: WordItemProps) => {\r\n  return (\r\n    <TableRow>\r\n      <TableCell component=\"th\" scope=\"row\">\r\n        {index}\r\n      </TableCell>\r\n      <TableCell>{word.eng}</TableCell>\r\n      <TableCell>{word.rus}</TableCell>\r\n      <TableCell>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={(e) => {\r\n            onWordsListMsg({ type: \"change_this_word\", word: word });\r\n          }}\r\n        >\r\n          <GrEdit />\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"error\"\r\n          onClick={(e) => {\r\n            apiQueries.deleteItem(word);\r\n            onMsg({ type: \"word_deleted\" });\r\n          }}\r\n        >\r\n          <MdDeleteForever />\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Word } from \"../types/types\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { EditableWord } from \"./EditableWord\";\r\nimport { WordItem } from \"./WordItem\";\r\n\r\ntype Msg =\r\n  | {\r\n      type: \"word_deleted\";\r\n    }\r\n  | {\r\n      type: \"word_updated\";\r\n    };\r\n\r\ntype WordsListMsg =\r\n  | {\r\n      type: \"change_this_word\";\r\n      word: Word;\r\n    }\r\n  | {\r\n      type: \"cancel_change\";\r\n    };\r\n\r\ntype WordsListProps = {\r\n  wordsList: Word[];\r\n  onMsg: (msg: Msg) => void;\r\n};\r\n\r\nexport const WordsList = ({ wordsList, onMsg }: WordsListProps) => {\r\n  const [editableWord, setEditableWord] = useState<null | Word>(null);\r\n\r\n  return (\r\n    <>\r\n      <TableContainer>\r\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>№</TableCell>\r\n              <TableCell>Eng</TableCell>\r\n              <TableCell>Rus</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {wordsList.map((word: Word, index: number) => {\r\n              return word === editableWord ? (\r\n                <EditableWord\r\n                  key={word.key}\r\n                  word={word}\r\n                  index={index + 1}\r\n                  onMsg={onMsg}\r\n                  onWordsListMsg={(msg: WordsListMsg) => {\r\n                    switch (msg.type) {\r\n                      case \"cancel_change\":\r\n                        setEditableWord(null);\r\n                        break;\r\n                    }\r\n                  }}\r\n                />\r\n              ) : (\r\n                <WordItem\r\n                  key={word.key}\r\n                  word={word}\r\n                  index={index + 1}\r\n                  onMsg={onMsg}\r\n                  onWordsListMsg={(msg: WordsListMsg) => {\r\n                    switch (msg.type) {\r\n                      case \"change_this_word\":\r\n                        setEditableWord(word);\r\n                        break;\r\n                    }\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Word } from \"../types/types\";\r\nimport { AddForm } from \"./form/AddForm\";\r\nimport { WordsList } from \"./WordsList\";\r\n\r\ntype Msg =\r\n  | {\r\n      type: \"new_word_added\";\r\n    }\r\n  | {\r\n      type: \"list_is_loaded\";\r\n    }\r\n  | {\r\n      type: \"word_deleted\";\r\n    }\r\n  | {\r\n      type: \"word_updated\";\r\n    };\r\n\r\ntype AppPageProps = {\r\n  wordsList: Word[];\r\n  onMsg: (msg: Msg) => void;\r\n};\r\n\r\nexport const AppPage = ({ wordsList, onMsg }: AppPageProps) => {\r\n  return (\r\n    <>\r\n      <AddForm onMsg={onMsg} />\r\n      <WordsList wordsList={wordsList} onMsg={onMsg} />\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Language, Translation } from \"../../types/types\";\r\n\r\nconst studyTypes = [\r\n  {\r\n    value: \"ENG\",\r\n    label: \"ENG-RU\",\r\n  },\r\n  {\r\n    value: \"RU\",\r\n    label: \"RU-ENG\",\r\n  },\r\n];\r\n\r\ntype Msg = {\r\n  type: \"start_learning\";\r\n  label: Language;\r\n  amount: number;\r\n};\r\n\r\ntype LearningFormProps = {\r\n  allWordsArray: Translation[];\r\n  onMsg: (msg: Msg) => void;\r\n};\r\n\r\nexport const LearningForm = ({ allWordsArray, onMsg }: LearningFormProps) => {\r\n  const [typeStudy, setTypeStudy] = useState<Language>(\"ENG\");\r\n  const [amountWords, setAmountWords] = useState<number>(0);\r\n\r\n  const handleChangeNumberInput = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    event.target.value && setAmountWords(+event.target.value);\r\n    if (+event.target.value > allWordsArray.length) {\r\n      event.target.value = allWordsArray.length.toString();\r\n      console.log(\"В вашем списке нет столько слов\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      method=\"get\"\r\n      onSubmit={(e) => {\r\n        onMsg({\r\n          type: \"start_learning\",\r\n          label: typeStudy,\r\n          amount: amountWords,\r\n        });\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <Select\r\n        labelId=\"demo-simple-select-label\"\r\n        id=\"demo-simple-select\"\r\n        value={typeStudy}\r\n        label=\"Language\"\r\n        onChange={(event) => {\r\n          setTypeStudy(event.target.value as Language);\r\n        }}\r\n      >\r\n        {studyTypes.map((option) => (\r\n          <MenuItem key={option.value} value={option.value}>\r\n            {option.label}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n      <TextField\r\n        id=\"outlined-number\"\r\n        InputProps={{ inputProps: { min: 1 } }}\r\n        label=\"Number of words\"\r\n        type=\"number\"\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        onChange={handleChangeNumberInput}\r\n      />\r\n      {amountWords ? (\r\n        <Button id=\"startLearningBtn\" variant=\"contained\" type=\"submit\">\r\n          Start Learning\r\n        </Button>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TextField from \"@mui/material/TextField\";\nimport { LearningWord, StateResult } from \"./LearningPageLoader\";\n// import { withStyles } from \"@material-ui/core/styles\";\n\ntype LearningItemProps = {\n  word: LearningWord;\n  index: number;\n  onMsg: (msg: Msg) => void;\n  result: StateResult[];\n  correctButtonIsClicked: boolean;\n};\n\ntype Msg = {\n  type: \"user_entered_word\";\n  wordFromUser: LearningWord;\n};\n\nexport const LearningItem = ({\n  word,\n  index,\n  onMsg,\n  result,\n  correctButtonIsClicked,\n}: LearningItemProps) => {\n  const [draft, setDraft] = useState<LearningWord>(word);\n  const [value, setValue] = useState<string>(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  useEffect(() => {\n    onMsg({ type: \"user_entered_word\", wordFromUser: draft });\n  }, [draft]);\n\n  const submitChange = (e: React.FocusEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    if (value !== draft.userInput) {\n      setDraft({\n        ...draft,\n        userInput: value,\n      });\n      // console.log(draft)\n      // не отправляю здесь onMsg потому что почему-то тут в момент отправки сообщения draft еще не изменился\n      // поэтому опять отправляю через useEffect\n      // onMsg({ type: \"user_entered_word\", wordFromUser: draft });\n    }\n  };\n\n  const disableInput = () => {\n    const itemResult: StateResult | undefined = result.find(\n      (item) => item.id === word.id\n    );\n\n    if (!correctButtonIsClicked && result.length > 0) {\n      return true;\n    } else if (\n      correctButtonIsClicked &&\n      itemResult !== undefined &&\n      !itemResult.isCorrect\n    ) {\n      return false;\n    } else if (\n      correctButtonIsClicked &&\n      itemResult !== undefined &&\n      itemResult.isCorrect\n    ) {\n      return true;\n    }\n  };\n\n  const backgroundColor = () => {\n    //TODO: Take this part out of the function\n    const itemResult: StateResult | undefined = result.find(\n      (item) => item.id === word.id\n    );\n\n    if (itemResult !== undefined && itemResult.isCorrect) {\n      return \"#99ff99\";\n    } else if (itemResult !== undefined && !itemResult.isCorrect) {\n      return \"#ff6666\";\n    } else {\n      return \"#fff\";\n    }\n  };\n\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        {++index}\n      </TableCell>\n      <TableCell>{word.show}</TableCell>\n      <TableCell>\n        <TextField\n          onChange={handleChange}\n          value={value}\n          disabled={disableInput()}\n          variant=\"outlined\"\n          onBlur={submitChange}\n          inputProps={{ sx: { backgroundColor: backgroundColor() } }}\n        />\n      </TableCell>\n    </TableRow>\n  );\n};\n","import React from \"react\";\n// import { DataLearningList } from \"./LearningPageLoader\";\nimport { Language } from \"../../types/types\";\nimport { LearningItem } from \"./LearningItem\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport Table from \"@mui/material/Table\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableBody from \"@mui/material/TableBody\";\nimport { LearningWord, StateResult } from \"./LearningPageLoader\";\n\ntype LearningListProps = {\n  labelTable: Language;\n  learningWords: LearningWord[];\n  onMsg: (msg: Msg) => void;\n  result: StateResult[];\n  correctButtonIsClicked: boolean;\n};\n\ntype Msg =\n  | {\n      type: \"user_entered_word\";\n      wordFromUser: LearningWord;\n    }\n  | {\n      type: \"check_user_words\";\n    };\n\nexport const LearningList = ({\n  labelTable,\n  learningWords,\n  onMsg,\n  result,\n  correctButtonIsClicked,\n}: LearningListProps) => {\n  return (\n    <>\n      <TableContainer>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>№</TableCell>\n              <TableCell>\n                {labelTable === \"RU\" ? \"Russian\" : \"English\"}\n              </TableCell>\n              <TableCell>\n                {labelTable === \"RU\" ? \"English\" : \"Russian\"}\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {learningWords.map((word: LearningWord, index: number) => {\n              return (\n                <LearningItem\n                  key={word.id}\n                  word={word}\n                  index={index}\n                  onMsg={onMsg}\n                  result={result}\n                  correctButtonIsClicked={correctButtonIsClicked}\n                />\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport { StateResult } from \"./LearningPageLoader\";\n\ntype Msg =\n  | {\n      type: \"check_user_words\";\n    }\n  | {\n      type: \"correct_user_words\";\n    }\n  | {\n      type: \"show_result\";\n    };\n\ntype LearningCheckingButtonsProps = {\n  onMsg: (msg: Msg) => void;\n  result: StateResult[];\n  correctButtonIsClicked: boolean;\n};\nexport const LearningCheckingButtons = ({\n  onMsg,\n  result,\n  correctButtonIsClicked,\n}: LearningCheckingButtonsProps) => {\n  const anyMistakes = (result: StateResult[]) => {\n    return result.find((word) => !word.isCorrect);\n  };\n\n  if (result.length === 0 || (correctButtonIsClicked && result.length > 0)) {\n    return (\n      <Button\n        variant=\"contained\"\n        onClick={(e) => {\n          onMsg({ type: \"check_user_words\" });\n        }}\n      >\n        Check\n      </Button>\n    );\n  } else if (result.length > 0 && anyMistakes(result) !== undefined) {\n    return (\n      <>\n        <Button\n          variant=\"contained\"\n          onClick={(e) => {\n            onMsg({ type: \"correct_user_words\" });\n          }}\n        >\n          Correct the wrong words\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={(e) => {\n            onMsg({ type: \"show_result\" });\n          }}\n        >\n          Get result\n        </Button>\n      </>\n    );\n  } else if (result.length > 0 && anyMistakes(result) === undefined) {\n    return (\n      <Button\n        variant=\"contained\"\n        onClick={(e) => {\n          // onMsg({ type: \"correct_user_words\" });\n        }}\n      >\n        That's right!\n      </Button>\n    );\n  } else {\n    return (\n      <Button\n        variant=\"contained\"\n        onClick={(e) => {\n          // onMsg({ type: \"check_user_words\" });\n        }}\n      >\n        Error\n      </Button>\n    );\n  }\n};\n","import React from \"react\";\nimport { StateResult } from \"./LearningPageLoader\";\n\ntype LearningResultProps = {\n  result: StateResult[];\n};\n\nexport const LearningResult = ({ result }: LearningResultProps) => {\n  const rightWords = () => {\n    return result.filter((word) => word.isCorrect).length;\n  };\n\n  const wrongWords = () => {\n    return result.filter((word) => !word.isCorrect).length;\n  };\n\n  return (\n    <div>\n      You have studied {result.length} words. {rightWords()} of them are correct\n      and {wrongWords()} are incorrect.\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { DataLearningList, Translation, Word } from \"../../types/types\";\nimport { LearningForm } from \"./LearningForm\";\nimport { LearningList } from \"./LearningList\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { notReachable } from \"../../utilities/utilities\";\nimport { LearningCheckingButtons } from \"./LearningCheckingButtons\";\nimport { LearningResult } from \"./LearningResult\";\n\ntype LearningPageLoaderProps = {\n  wordsList: Word[];\n};\n\nexport type LearningWord = {\n  id: string;\n  show: string;\n  hide: string;\n  userInput: string;\n};\n\nexport type StateResult = {\n  id: string;\n  isCorrect: boolean;\n};\n\ntype StateLearningWords = LearningWord[];\n\ntype StateLearningPage =\n  | {\n      type: \"getting_user_data\";\n    }\n  | {\n      type: \"got_user_data\";\n      data: DataLearningList;\n    }\n  | {\n      type: \"show_result\";\n    }\n  | {\n      type: \"error\";\n      error: string;\n    };\n\nexport const LearningPageLoader = ({ wordsList }: LearningPageLoaderProps) => {\n  const [stateLearning, setStateLearning] = useState<StateLearningPage>({\n    type: \"getting_user_data\",\n  });\n  const [stateLearningWords, setStateLearningWords] =\n    useState<StateLearningWords>([]);\n\n  const [result, setResult] = useState<StateResult[]>([]);\n\n  const [correctButtonIsClicked, setCorrectButtonIsClicked] =\n    useState<boolean>(false);\n\n  useEffect(() => {\n    switch (stateLearning.type) {\n      case \"getting_user_data\":\n        break;\n      case \"got_user_data\":\n        setStateLearningWords(learningWordsForUser(stateLearning.data));\n        break;\n      case \"error\":\n        break;\n    }\n  }, [stateLearning]);\n\n  const allWordsArray = wordsList.map((word: Word) => {\n    const { key, ...translation } = word;\n    return translation;\n  });\n\n  const learningWordsForUser = (userData: DataLearningList) => {\n    const sortArray = allWordsArray\n      .sort(function () {\n        return Math.random() - 0.5;\n      })\n      .slice(0, userData.amount);\n    const wordArrayUnderStudy = sortArray.map((word: Translation) => {\n      return {\n        id: uuidv4(),\n        show: userData.label === \"RU\" ? word.rus : word.eng,\n        hide: userData.label === \"RU\" ? word.eng : word.rus,\n        userInput: \"\",\n      };\n    });\n    return wordArrayUnderStudy;\n  };\n\n  const addOneUserWordToState = (word: LearningWord) => {\n    const newStateLearningWords = [...stateLearningWords];\n    const index = newStateLearningWords.findIndex((el) => el.id === word.id);\n    newStateLearningWords[index] = word;\n    setStateLearningWords(newStateLearningWords);\n    console.log(newStateLearningWords);\n  };\n\n  const checkResult = (arr: LearningWord[]) => {\n    console.log(arr);\n    const a = arr.map((word) => {\n      return {\n        id: word.id,\n        isCorrect: word.hide === word.userInput,\n      };\n    });\n    console.log(a);\n    return a;\n  };\n\n  switch (stateLearning.type) {\n    case \"getting_user_data\":\n      return (\n        <>\n          <LearningForm\n            allWordsArray={allWordsArray}\n            onMsg={(msg) => {\n              switch (msg.type) {\n                case \"start_learning\":\n                  setStateLearning({\n                    type: \"got_user_data\",\n                    data: { label: msg.label, amount: msg.amount },\n                  });\n                //TODO: notReacheble here\n              }\n            }}\n          />\n        </>\n      );\n\n    case \"got_user_data\":\n      return (\n        <>\n          <LearningList\n            labelTable={stateLearning.data.label}\n            learningWords={stateLearningWords}\n            result={result}\n            correctButtonIsClicked={correctButtonIsClicked}\n            onMsg={(msg) => {\n              switch (msg.type) {\n                case \"check_user_words\":\n                  // TODO: check it\n                  break;\n                case \"user_entered_word\":\n                  addOneUserWordToState(msg.wordFromUser);\n                  break;\n                default:\n                  notReachable(msg);\n                  break;\n              }\n            }}\n          />\n          <LearningCheckingButtons\n            result={result}\n            correctButtonIsClicked={correctButtonIsClicked}\n            onMsg={(msg) => {\n              switch (msg.type) {\n                case \"check_user_words\":\n                  setCorrectButtonIsClicked(false);\n                  setResult(checkResult(stateLearningWords));\n                  break;\n                case \"correct_user_words\":\n                  setCorrectButtonIsClicked(true);\n                  break;\n                case \"show_result\":\n                  setStateLearning({ type: \"show_result\" });\n                //TODO: notReacheble here\n              }\n            }}\n          />\n        </>\n      );\n    case \"show_result\":\n      return <LearningResult result={result} />;\n    case \"error\":\n      return <></>;\n  }\n};\n","import React from \"react\";\r\nimport { Routes, Route, Link } from \"react-router-dom\";\r\nimport { LoadingComponent } from \"./LoadingComponent\";\r\nimport { useWordsList } from \"../hooks/useWordsList\";\r\nimport { notReachable } from \"../utilities/utilities\";\r\nimport { ErrorComponent } from \"./ErrorComponent\";\r\nimport { AppPage } from \"./AppPage\";\r\nimport { LearningPageLoader } from \"./learning/LearningPageLoader\";\r\n\r\nexport const PageLoader = () => {\r\n  const { state, reloadWordsList } = useWordsList();\r\n\r\n  switch (state.type) {\r\n    case \"loading\":\r\n      return <LoadingComponent />;\r\n\r\n    case \"loaded\":\r\n      return (\r\n        <>\r\n          <header>\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/learning\">Start learning</Link>\r\n          </header>\r\n          <Routes>\r\n            <Route\r\n              path=\"/\"\r\n              element={\r\n                <AppPage\r\n                  wordsList={state.wordsList}\r\n                  onMsg={(msg) => {\r\n                    switch (msg.type) {\r\n                      case \"new_word_added\":\r\n                      case \"word_deleted\":\r\n                      case \"word_updated\":\r\n                        reloadWordsList();\r\n                        return;\r\n                      case \"list_is_loaded\":\r\n                        return;\r\n                      default:\r\n                        notReachable(msg);\r\n                        break;\r\n                    }\r\n                  }}\r\n                />\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/learning\"\r\n              element={<LearningPageLoader wordsList={state.wordsList} />}\r\n            />\r\n          </Routes>\r\n        </>\r\n      );\r\n\r\n    case \"error\":\r\n      return (\r\n        <ErrorComponent\r\n          onMsg={(msg) => {\r\n            switch (msg.type) {\r\n              case \"reload_data_button_clicked\":\r\n                reloadWordsList();\r\n                return;\r\n              default:\r\n                notReachable(msg.type);\r\n                break;\r\n            }\r\n          }}\r\n        />\r\n      );\r\n\r\n    default:\r\n      return notReachable(state);\r\n  }\r\n};\r\n","import React from 'react';\nimport {PageLoader} from \"./components/PageLoader\";\n\nfunction App() {\n  return (\n    <PageLoader/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          <App />\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}
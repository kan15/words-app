{"version":3,"sources":["components/LoadingComponent.tsx","api/apiQueries.tsx","utilities/utilities.tsx","hooks/useWordsList.tsx","components/ErrorComponent.tsx","components/form/AddForm.tsx","hooks/useAddWord.tsx","components/WordItem.tsx","components/EditableWord.tsx","components/WordsList.tsx","components/AppPage.tsx","components/learning/LearningForm.tsx","components/learning/LearningItem.tsx","components/learning/LearningList.tsx","components/learning/LearningPageLoader.tsx","components/PageLoader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoadingComponent","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","apiQueries","getData","Promise","resolve","reject","database","ref","on","data","words","serverData","val","Object","keys","map","key","translation","mapWordsList","error","addItem","newWord","newWordKey","child","push","updates","update","updateItem","eng","rus","deleteItem","word","console","log","remove","then","catch","message","notReachable","state","Error","useWordsList","useState","type","setState","useEffect","wordsList","reloadWordsList","ErrorComponent","onMsg","title","onClick","AddForm","addingNewWord","draft","addWord","setError","useAddWord","setDraft","handleChange","e","target","name","value","handleSubmit","trim","length","test","isDraftValid","method","onSubmit","Input","onChange","Button","variant","color","preventDefault","WordItem","index","setEditableWord","TableRow","TableCell","component","scope","EditableWord","draftEditableWord","setDraftEditableWord","TextField","label","WordsList","editableWord","TableContainer","Table","sx","minWidth","TableHead","TableBody","AppPage","studyTypes","LearningForm","allWordsArray","typeStudy","setTypeStudy","amountWords","setAmountWords","amount","select","event","helperText","option","MenuItem","id","InputProps","inputProps","min","InputLabelProps","shrink","toString","LearningItem","wordFromUser","show","onBlur","userInput","LearningList","labelTable","learningWords","LearningPageLoader","stateLearning","setStateLearning","stateLearningWords","setStateLearningWords","learningWordsForUser","userData","wordArrayUnderStudy","sort","Math","random","slice","uuidv4","hide","msg","newStateLearningWords","findIndex","el","addOneUserWordToState","PageLoader","to","path","element","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.647a2583.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const LoadingComponent = () => {\r\n  return <div>Loading...</div>;\r\n};\r\n","import firebase from \"firebase/compat/app\";\nimport \"firebase/compat/database\";\nimport { Translation, Word } from \"../types/types\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBr1PLF6Zdq_k2eLlR3HlgUApNGejrBNIA\",\n  authDomain: \"english-vocabulary-react.firebaseapp.com\",\n  databaseURL: \"https://english-vocabulary-react-default-rtdb.firebaseio.com\",\n  projectId: \"english-vocabulary-react\",\n  storageBucket: \"english-vocabulary-react.appspot.com\",\n  messagingSenderId: \"281598012164\",\n  appId: \"1:281598012164:web:7e8ed5899b5cf80bf8fe51\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst errData = (error: string) => {\n  console.log(\"Error!\", error);\n};\n\nconst listWords = () => {\n  const database = firebase.database();\n  return database.ref(\"words\");\n};\n\nconst mapWordsList = (data: firebase.database.DataSnapshot) => {\n  const serverData = data.val();\n  return Object.keys(serverData).map((key) => {\n    const translation = serverData[key] as Translation;\n    return {\n      ...translation,\n      key,\n    } as Word;\n  });\n};\n\nconst apiQueries = {\n  getData(): Promise<Word[]> {\n    return new Promise((resolve, reject) => {\n      listWords().on(\n        \"value\",\n        (data) => {\n          const words: Word[] = mapWordsList(data);\n          return resolve(words);\n        },\n        (error) => {\n          reject(error);\n        }\n      );\n    });\n  },\n\n  addItem(newWord: Translation): Promise<void> {\n    const newWordKey = firebase.database().ref().child(\"words\").push().key;\n    const updates: { [index: string]: {} } = {};\n    updates[`/words/${newWordKey}`] = newWord;\n    return firebase.database().ref().update(updates);\n  },\n\n  updateItem(newWord: Word) {\n    const adaNameRef = firebase.database().ref(`words/${newWord.key}`);\n    adaNameRef.update({ eng: newWord.eng, rus: newWord.rus });\n  },\n\n  deleteItem(word: Word) {\n    console.log(word.key);\n    const adaRef = firebase.database().ref(`words/${word.key}`);\n    adaRef\n      .remove()\n      .then(function () {\n        console.log(\"Remove succeeded.\");\n      })\n      .catch(function (error) {\n        console.log(`Remove failed: ${error.message}`);\n      });\n  },\n};\n\nexport default apiQueries;\n","export const notReachable = (state: never): never => {\r\n    throw new Error(state);\r\n};","import { useEffect, useState } from \"react\";\r\nimport apiQueries from \"../api/apiQueries\";\r\nimport { Word } from \"../types/types\";\r\nimport { notReachable } from \"../utilities/utilities\";\r\n\r\nexport type State =\r\n  | {\r\n      type: \"loading\";\r\n    }\r\n  | {\r\n      type: \"loaded\";\r\n      wordsList: Word[];\r\n    }\r\n  | {\r\n      type: \"error\";\r\n      error: string;\r\n    };\r\n\r\nexport const useWordsList = (): {\r\n  state: State;\r\n  reloadWordsList: () => void;\r\n} => {\r\n  const [state, setState] = useState<State>({\r\n    type: \"loading\",\r\n  });\r\n\r\n  const showList = () => {\r\n    apiQueries\r\n      .getData()\r\n      .then((words: Word[]) => {\r\n        setState({\r\n          type: \"loaded\",\r\n          wordsList: words,\r\n        });\r\n      })\r\n      .catch((error: Error) => {\r\n        setState({\r\n          type: \"error\",\r\n          error: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    switch (state.type) {\r\n      case \"loading\":\r\n        showList();\r\n        break;\r\n      case \"loaded\":\r\n      case \"error\":\r\n        break;\r\n      default:\r\n        notReachable(state);\r\n    }\r\n  }, [state]);\r\n\r\n  const reloadWordsList = () => {\r\n    setState({\r\n      type: \"loading\",\r\n    });\r\n  };\r\n\r\n  return { state, reloadWordsList };\r\n};\r\n","import React from \"react\";\r\n\r\ntype ErrorComponentProps = {\r\n  onMsg: (msg: Msg) => void;\r\n}\r\n\r\ntype Msg = {\r\n  type: \"ReloadDataButtonClicked\";\r\n};\r\n\r\nexport const ErrorComponent = ({ onMsg }: ErrorComponentProps) => {\r\n  return (\r\n    <>\r\n      <div>Server error</div>\r\n      <button\r\n        title=\"Reload data\"\r\n        type=\"button\"\r\n        onClick={() => {\r\n          onMsg({ type: \"ReloadDataButtonClicked\" });\r\n        }}\r\n      >\r\n        Reload data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport { Translation } from \"../../types/types\";\nimport { Input, Button } from \"@mui/material\";\nimport { isDraftValid, useAddWord } from \"../../hooks/useAddWord\";\nimport { LoadingComponent } from \"../LoadingComponent\";\n\ntype AddFormProps = {\n  onMsg: (msg: Msg) => void;\n};\n\ntype Msg = {\n  type: \"NewWordAdded\";\n  word: Translation;\n};\n\nexport const AddForm = ({ onMsg }: AddFormProps) => {\n  const { state, addWord, setError } = useAddWord();\n\n  const [draft, setDraft] = useState<Translation>({\n    eng: \"\",\n    rus: \"\",\n  });\n\n  useEffect(() => {\n    switch (state.type) {\n      case \"loaded\": {\n        onMsg({\n          type: \"NewWordAdded\",\n          word: state.word,\n        });\n        break;\n      }\n    }\n  }, [onMsg, state]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setDraft((draft) => ({\n      ...draft,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = () => {\n    if (isDraftValid(draft)) {\n      addWord(draft);\n    } else {\n      setError(\"draft is not valid\");\n    }\n  };\n\n  switch (state.type) {\n    case \"loading\":\n      return <LoadingComponent />;\n    case \"error\":\n    case \"not_asked\":\n    case \"loaded\":\n      return (\n        <form method=\"get\" onSubmit={handleSubmit}>\n          {state.type === \"error\" ? state.error : \"no errors\"}\n          <Input\n            type=\"text\"\n            value={draft.eng}\n            name=\"eng\"\n            onChange={handleChange}\n          />\n          <Input\n            type=\"text\"\n            value={draft.rus}\n            name=\"rus\"\n            onChange={handleChange}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"success\"\n            type=\"submit\"\n            onClick={(e) => {\n              handleSubmit();\n              e.preventDefault();\n            }}\n          >\n            Add word\n          </Button>\n        </form>\n      );\n  }\n};\n","import React, { useEffect, useState } from \"react\";\r\nimport { Translation } from \"../types/types\";\r\nimport apiQueries from \"../api/apiQueries\";\r\nimport { notReachable } from \"../utilities/utilities\";\r\n\r\nexport type State =\r\n  | {\r\n      type: \"not_asked\";\r\n    }\r\n  | {\r\n      type: \"loading\";\r\n      draft: Translation;\r\n    }\r\n  | {\r\n      type: \"loaded\";\r\n      word: Translation;\r\n    }\r\n  | {\r\n      type: \"error\";\r\n      error: string;\r\n    };\r\n\r\nexport const isDraftValid = (draft: Translation): boolean => {\r\n  const eng = draft.eng.trim();\r\n  const rus = draft.rus.trim();\r\n  const cyrillicRegExpression = /^[а-яА-Я\\s]*$/;\r\n  const latinRegExpression = /^[a-zA-Z\\s]*$/;\r\n  let isValid = null;\r\n  if (eng.length + rus.length < 2) {\r\n    isValid = false;\r\n  } else\r\n    isValid = !(\r\n      !cyrillicRegExpression.test(rus) || !latinRegExpression.test(eng)\r\n    );\r\n  return isValid;\r\n};\r\n\r\ntype ReturnType = {\r\n  state: State;\r\n  addWord: (word: Translation) => void;\r\n  setError: (error: string) => void;\r\n};\r\n\r\nexport const useAddWord = (): ReturnType => {\r\n  const [state, setState] = useState<State>({\r\n    type: \"not_asked\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    switch (state.type) {\r\n      case \"not_asked\":\r\n        break;\r\n      case \"loaded\":\r\n        break;\r\n      case \"error\":\r\n        break;\r\n      case \"loading\": {\r\n        addingNewWord(state.draft);\r\n        break;\r\n      }\r\n      default: {\r\n        return notReachable(state);\r\n      }\r\n    }\r\n  }, [state]);\r\n\r\n  const addingNewWord = (word: Translation) => {\r\n    apiQueries\r\n      .addItem(word)\r\n      .then(() => {\r\n        setState({ type: \"loaded\", word: word });\r\n      })\r\n      .catch((error: Error) => {\r\n        setState({ type: \"error\", error: error.message });\r\n      });\r\n  };\r\n\r\n  const addWord = (word: Translation) => {\r\n    setState({ type: \"loading\", draft: word });\r\n  };\r\n\r\n  const setError = (error: string): void => {\r\n    setState({ type: \"error\", error: error });\r\n  };\r\n  return { state, addWord, setError };\r\n};\r\n","import React from \"react\";\nimport { Word } from \"../types/types\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport { GrEdit } from \"react-icons/gr\";\nimport apiQueries from \"../api/apiQueries\";\nimport Button from \"@mui/material/Button\";\n\ntype Msg = {\n  type: \"WordDeleted\";\n};\n\ntype WordItemProps = {\n  word: Word;\n  index: number;\n  onMsg: (msg: Msg) => void;\n  setEditableWord: (word: Word) => void;\n};\n\nexport const WordItem = ({\n  word,\n  index,\n  onMsg,\n  setEditableWord,\n}: WordItemProps) => {\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        {index}\n      </TableCell>\n      <TableCell>{word.eng}</TableCell>\n      <TableCell>{word.rus}</TableCell>\n      <TableCell>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={(e) => {\n            setEditableWord(word);\n          }}\n        >\n          <GrEdit />\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"error\"\n          onClick={(e) => {\n            apiQueries.deleteItem(word);\n            onMsg({ type: \"WordDeleted\" });\n          }}\n        >\n          <MdDeleteForever />\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Word } from \"../types/types\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { GiCancel } from \"react-icons/gi\";\nimport { MdDone } from \"react-icons/md\";\nimport apiQueries from \"../api/apiQueries\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\n\ntype Msg = {\n  type: \"WordUpdated\";\n};\n\ntype WordItemProps = {\n  word: Word;\n  index: number;\n  setEditableWord: (word: null | Word) => void;\n  onMsg: (msg: Msg) => void;\n};\n\nexport const EditableWord = ({\n  word,\n  index,\n  setEditableWord,\n  onMsg,\n}: WordItemProps) => {\n  const [draftEditableWord, setDraftEditableWord] = useState<Word>(word);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    setDraftEditableWord((draftEditableWord: Word) => ({\n      ...draftEditableWord,\n      [name]: value,\n    }));\n    console.log(draftEditableWord);\n  };\n\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        {index}\n      </TableCell>\n      <TableCell>\n        <TextField\n          label=\"English\"\n          variant=\"outlined\"\n          value={draftEditableWord.eng}\n          onChange={handleChange}\n          name=\"eng\"\n        />\n      </TableCell>\n      <TableCell>\n        <TextField\n          label=\"Russian\"\n          variant=\"outlined\"\n          value={draftEditableWord.rus}\n          onChange={handleChange}\n          name=\"rus\"\n        />\n      </TableCell>\n      <TableCell>\n        <Button\n          variant=\"contained\"\n          color=\"success\"\n          onClick={(e) => {\n            apiQueries.updateItem(draftEditableWord);\n            onMsg({ type: \"WordUpdated\" });\n          }}\n        >\n          <MdDone />\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"error\"\n          onClick={(e) => {\n            setEditableWord(null);\n          }}\n        >\n          <GiCancel />\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Word } from \"../types/types\";\nimport { WordItem } from \"./WordItem\";\nimport { EditableWord } from \"./EditableWord\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\n\ntype Msg =\n  | {\n      type: \"WordDeleted\";\n    }\n  | {\n      type: \"WordUpdated\";\n    };\n\ntype WordsListProps = {\n  wordsList: Word[];\n  onMsg: (msg: Msg) => void;\n};\n\nexport const WordsList = ({ wordsList, onMsg }: WordsListProps) => {\n  const [editableWord, setEditableWord] = useState<null | Word>(null);\n\n  return (\n    <>\n      <TableContainer>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>№</TableCell>\n              <TableCell>Eng</TableCell>\n              <TableCell>Rus</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {wordsList.map((word: Word, index: number) => {\n              return word === editableWord ? (\n                <EditableWord\n                  key={word.key}\n                  word={word}\n                  index={index + 1}\n                  setEditableWord={setEditableWord}\n                  onMsg={onMsg}\n                />\n              ) : (\n                <WordItem\n                  key={word.key}\n                  word={word}\n                  index={index + 1}\n                  onMsg={onMsg}\n                  setEditableWord={setEditableWord}\n                />\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Word } from \"../types/types\";\nimport { AddForm } from \"./form/AddForm\";\nimport { WordsList } from \"./WordsList\";\n\ntype Msg =\n  | {\n      type: \"NewWordAdded\";\n    }\n  | {\n      type: \"ListIsLoaded\";\n    }\n  | {\n      type: \"WordDeleted\";\n    }\n  | {\n      type: \"WordUpdated\";\n    };\n\ntype AppPageProps = {\n  wordsList: Word[];\n  onMsg: (msg: Msg) => void;\n};\n\nexport const AppPage = ({ wordsList, onMsg }: AppPageProps) => {\n  return (\n    <>\n      <AddForm onMsg={onMsg} />\n      <WordsList wordsList={wordsList} onMsg={onMsg} />\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Button from \"@mui/material/Button\";\nimport { Languages, Translation } from \"../../types/types\";\n\nconst studyTypes = [\n  {\n    value: \"ENG\",\n    label: \"ENG-RU\",\n  },\n  {\n    value: \"RU\",\n    label: \"RU-ENG\",\n  },\n];\n\ntype Msg = {\n  type: \"StartLearning\";\n  label: Languages | string;\n  amount: number;\n};\n\ntype LearningFormProps = {\n  allWordsArray: Translation[];\n  onMsg: (msg: Msg) => void;\n};\n\nexport const LearningForm = ({ allWordsArray, onMsg }: LearningFormProps) => {\n  const [typeStudy, setTypeStudy] = useState<Languages | string>(\"ENG\");\n  const [amountWords, setAmountWords] = useState<number>(0);\n\n  const handleChangeLangInput = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setTypeStudy(event.target.value);\n  };\n\n  const handleChangeNumberInput = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    event.target.value && setAmountWords(+event.target.value);\n    if (+event.target.value > allWordsArray.length) {\n      event.target.value = allWordsArray.length.toString();\n      console.log(\"В вашем списке нет столько слов\");\n    }\n  };\n\n  const handleSubmit = () => {\n    onMsg({\n      type: \"StartLearning\",\n      label: typeStudy,\n      amount: amountWords,\n    });\n  };\n\n  return (\n    <form method=\"get\" onSubmit={handleSubmit}>\n      <TextField\n        select\n        label=\"Select\"\n        value={typeStudy}\n        onChange={handleChangeLangInput}\n        helperText=\"Please select your type\"\n      >\n        {studyTypes.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        id=\"outlined-number\"\n        InputProps={{ inputProps: { min: 1 } }}\n        label=\"Number of words\"\n        type=\"number\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={handleChangeNumberInput}\n      />\n      {amountWords ? (\n        <Button\n          id=\"startLearningBtn\"\n          variant=\"contained\"\n          type=\"submit\"\n          onClick={(e) => {\n            e.preventDefault();\n            handleSubmit();\n          }}\n        >\n          Start Learning\n        </Button>\n      ) : null}\n    </form>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TextField from \"@mui/material/TextField\";\nimport { LearningWord } from \"./LearningPageLoader\";\n\ntype LearningItemProps = {\n  word: LearningWord;\n  index: number;\n  onMsg: (msg: Msg) => void;\n};\n\ntype Msg = {\n  type: \"UserEnteredWord\";\n  wordFromUser: LearningWord;\n};\n\nexport const LearningItem = ({ word, index, onMsg }: LearningItemProps) => {\n  const [draft, setDraft] = useState<LearningWord>(word);\n\n  useEffect(() => {\n    onMsg({ type: \"UserEnteredWord\", wordFromUser: draft });\n  }, [draft]);\n\n  const submitChange = (e: React.FocusEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    value !== draft.userInput &&\n      setDraft({\n        ...draft,\n        userInput: value,\n      });\n  };\n\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        {++index}\n      </TableCell>\n      <TableCell>{word.show}</TableCell>\n      <TableCell>\n        <TextField variant=\"outlined\" onBlur={submitChange} />\n      </TableCell>\n    </TableRow>\n  );\n};\n","import React from \"react\";\n// import { DataLearningList } from \"./LearningPageLoader\";\nimport { Languages, Translation } from \"../../types/types\";\nimport { LearningItem } from \"./LearningItem\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport Table from \"@mui/material/Table\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableBody from \"@mui/material/TableBody\";\nimport { LearningWord } from \"./LearningPageLoader\";\n\ntype LearningListProps = {\n  labelTable: string | Languages;\n  learningWords: LearningWord[];\n  onMsg: (msg: Msg) => void;\n};\n\ntype Msg = {\n  type: \"UserEnteredWord\";\n  wordFromUser: LearningWord;\n};\n\nexport const LearningList = ({\n  labelTable,\n  learningWords,\n  onMsg,\n}: LearningListProps) => {\n  return (\n    <>\n      <TableContainer>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>№</TableCell>\n              <TableCell>\n                {labelTable === \"RU\" ? \"Russian\" : \"English\"}\n              </TableCell>\n              <TableCell>\n                {labelTable === \"RU\" ? \"English\" : \"Russian\"}\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {learningWords.map((word: LearningWord, index: number) => {\n              return (\n                <LearningItem\n                  key={word.id}\n                  word={word}\n                  index={index}\n                  onMsg={onMsg}\n                />\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { DataLearningList, Translation, Word } from \"../../types/types\";\nimport { LearningForm } from \"./LearningForm\";\nimport { LearningList } from \"./LearningList\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { notReachable } from \"../../utilities/utilities\";\n\ntype LearningPageLoaderProps = {\n  wordsList: Word[];\n};\n\nexport type LearningWord = {\n  id: string;\n  show: string;\n  hide: string;\n  userInput: string;\n};\n\ntype StateLearningWords = [] | LearningWord[];\n\ntype StateLearningPage =\n  | {\n      type: \"getting_user_data\";\n    }\n  | {\n      type: \"got_user_data\";\n      data: DataLearningList;\n    }\n  | {\n      type: \"error\";\n      error: string;\n    };\n\nexport const LearningPageLoader = ({ wordsList }: LearningPageLoaderProps) => {\n  const [stateLearning, setStateLearning] = useState<StateLearningPage>({\n    type: \"getting_user_data\",\n  });\n  const [stateLearningWords, setStateLearningWords] =\n    useState<StateLearningWords>([]);\n\n  useEffect(() => {\n    switch (stateLearning.type) {\n      case \"getting_user_data\":\n        break;\n      case \"got_user_data\":\n        setStateLearningWords(learningWordsForUser(stateLearning.data));\n        break;\n      case \"error\":\n        break;\n    }\n  }, [stateLearning]);\n\n  const allWordsArray = wordsList.map((word: Word) => {\n    const { key, ...translation } = word;\n    return translation;\n  });\n\n  const learningWordsForUser = (userData: DataLearningList) => {\n    const sortArray = allWordsArray\n      .sort(function () {\n        return Math.random() - 0.5;\n      })\n      .slice(0, userData.amount);\n    const wordArrayUnderStudy = sortArray.map((word: Translation) => {\n      return {\n        id: uuidv4(),\n        show: userData.label === \"RU\" ? word.rus : word.eng,\n        hide: userData.label === \"RU\" ? word.eng : word.rus,\n        userInput: \"\",\n      };\n    });\n    console.log(\"Изучаемый массив слов:\");\n    console.log(wordArrayUnderStudy);\n    return wordArrayUnderStudy;\n  };\n\n  const addOneUserWordToState = (word: LearningWord) => {\n    const newStateLearningWords = [...stateLearningWords];\n    const index = newStateLearningWords.findIndex((el) => el.id === word.id);\n    newStateLearningWords[index] = word;\n    setStateLearningWords(newStateLearningWords);\n  };\n\n  switch (stateLearning.type) {\n    case \"getting_user_data\":\n      return (\n        <>\n          <LearningForm\n            allWordsArray={allWordsArray}\n            onMsg={(msg) => {\n              switch (msg.type) {\n                case \"StartLearning\":\n                  setStateLearning({\n                    type: \"got_user_data\",\n                    data: { label: msg.label, amount: msg.amount },\n                  });\n              }\n            }}\n          />\n        </>\n      );\n\n    case \"got_user_data\":\n      return (\n        <>\n          {\n            <LearningList\n              labelTable={stateLearning.data.label}\n              learningWords={stateLearningWords}\n              onMsg={(msg) => {\n                switch (msg.type) {\n                  case \"UserEnteredWord\":\n                    addOneUserWordToState(msg.wordFromUser);\n                }\n              }}\n            />\n          }\n        </>\n      );\n    case \"error\":\n      return <></>;\n  }\n};\n","import React from \"react\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport { LoadingComponent } from \"./LoadingComponent\";\nimport { useWordsList } from \"../hooks/useWordsList\";\nimport { notReachable } from \"../utilities/utilities\";\nimport { ErrorComponent } from \"./ErrorComponent\";\nimport { AppPage } from \"./AppPage\";\nimport { LearningPageLoader } from \"./learning/LearningPageLoader\";\n\nexport const PageLoader = () => {\n  const { state, reloadWordsList } = useWordsList();\n\n  switch (state.type) {\n    case \"loading\":\n      return <LoadingComponent />;\n\n    case \"loaded\":\n      return (\n        <>\n          <header>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/learning\">Start learning</Link>\n          </header>\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <AppPage\n                  wordsList={state.wordsList}\n                  onMsg={(msg) => {\n                    switch (msg.type) {\n                      case \"NewWordAdded\":\n                      case \"WordDeleted\":\n                      case \"WordUpdated\":\n                        reloadWordsList();\n                        return;\n                      case \"ListIsLoaded\":\n                        return;\n                      default:\n                        notReachable(msg);\n                        break;\n                    }\n                  }}\n                />\n              }\n            />\n            <Route\n              path=\"/learning\"\n              element={<LearningPageLoader wordsList={state.wordsList} />}\n            />\n          </Routes>\n        </>\n      );\n\n    case \"error\":\n      return (\n        <ErrorComponent\n          onMsg={(msg) => {\n            switch (msg.type) {\n              case \"ReloadDataButtonClicked\":\n                reloadWordsList();\n                return;\n              default:\n                notReachable(msg.type);\n                break;\n            }\n          }}\n        />\n      );\n\n    default:\n      return notReachable(state);\n  }\n};\n","import React from 'react';\nimport {PageLoader} from \"./components/PageLoader\";\n\nfunction App() {\n  return (\n    <PageLoader/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}